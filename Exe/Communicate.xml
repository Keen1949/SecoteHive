<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Communicate</name>
    </assembly>
    <members>
        <member name="T:Communicate.ComLink">
            <summary>
            串口通讯类封装
            </summary>
        </member>
        <member name="F:Communicate.ComLink.m_nComNo">
             <summary>
            串口号 
             </summary>
        </member>
        <member name="F:Communicate.ComLink.m_strName">
             <summary>
            串口定义名称 
             </summary>
        </member>
        <member name="F:Communicate.ComLink.m_nBaudRate">
             <summary>
            波特率 
             </summary>
        </member>
        <member name="F:Communicate.ComLink.m_nDataBit">
             <summary>
            数据位 
             </summary>
        </member>
        <member name="F:Communicate.ComLink.m_strPartiy">
             <summary>
            校验位 
             </summary>
        </member>
        <member name="F:Communicate.ComLink.m_strStopBit">
             <summary>
            停止位 
             </summary>
        </member>
        <member name="F:Communicate.ComLink.m_strFlowCtrl">
             <summary>
            流控制 
             </summary>
        </member>
        <member name="F:Communicate.ComLink.m_nTime">
             <summary>
            超时时间,单位毫秒
             </summary>
        </member>
        <member name="F:Communicate.ComLink.m_nBufferSzie">
             <summary>
            缓冲区大小 
             </summary>
        </member>
        <member name="F:Communicate.ComLink.m_strLineFlag">
             <summary>
            命令分隔符标志 
             </summary>
        </member>
        <member name="F:Communicate.ComLink.m_strLine">
             <summary>
            命令分隔符 
             </summary>
        </member>
        <member name="T:Communicate.ComLink.StateChangedHandler">
            <summary>
            状态变更委托
            </summary>
            <param name="com"></param>
        </member>
        <member name="E:Communicate.ComLink.StateChangedEvent">
            <summary>
            定义状态变更事件
            </summary>
        </member>
        <member name="T:Communicate.ComLink.DataReceivedHandler">
            <summary>
            异步接收数据委托
            </summary>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="E:Communicate.ComLink.DataReceivedEvent">
            <summary>
            异步接收数据事件
            </summary>
        </member>
        <member name="F:Communicate.ComLink.m_serialPort">
            <summary>
            系统串口类引用
            </summary>
        </member>
        <member name="F:Communicate.ComLink.m_bTimeOut">
            <summary>
            读取数据过程中是否已经超时
            </summary>
        </member>
        <member name="M:Communicate.ComLink.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="nComNo"></param>
            <param name="strName"></param>
            <param name="nBaudRate"></param>
            <param name="nDataBit"></param>
            <param name="strPartiy"></param>
            <param name="strStopBit"></param>
            <param name="strFlowCtrl"></param>
            <param name="nTimeMs"></param>
            <param name="nBufferSzie"></param>
            <param name="strLine"></param>
        </member>
        <member name="M:Communicate.ComLink.Open">
             <summary>
            打开串口
             </summary>
             <returns></returns>
        </member>
        <member name="M:Communicate.ComLink.IsOpen">
            <summary>
            判断是否已经打开
            </summary>
            <returns></returns>
        </member>
        <member name="M:Communicate.ComLink.IsTimeOut">
            <summary>
            判断是否超时
            </summary>
            <returns></returns>
        </member>
        <member name="M:Communicate.ComLink.WriteData(System.Byte[],System.Int32)">
             <summary>
            向串口写入数据 
             </summary>
             <param name="sendBytes"></param>
             <param name="nLen"></param>
             <returns></returns>
        </member>
        <member name="M:Communicate.ComLink.WriteString(System.String)">
             <summary>
            向串口写入字符串 
             </summary>
             <param name="strData"></param>
             <returns></returns>
        </member>
        <member name="M:Communicate.ComLink.WriteLine(System.String)">
             <summary>
            向串口写入一行字符 
             </summary>
             <param name="strData"></param>
             <returns></returns>
        </member>
        <member name="M:Communicate.ComLink.ReadData(System.Byte[],System.Int32)">
             <summary>
            从串口读取数据 
             </summary>
             <param name="bytes"></param>
             <param name="nLen"></param>
             <returns></returns>
        </member>
        <member name="M:Communicate.ComLink.ReadLine(System.String@)">
             <summary>
            从串口读取一行数据 
             </summary>
             <param name="strData"></param>
             <returns></returns>
        </member>
        <member name="M:Communicate.ComLink.Close">
             <summary>
            关闭串口 
             </summary>
        </member>
        <member name="M:Communicate.ComLink.ClearBuffer(System.Boolean,System.Boolean)">
            <summary>
            清除缓冲区
            </summary>
            <param name="bIn">是否清除输入缓冲区</param>
            <param name="bOut">是否清除输出缓冲区</param>
        </member>
        <member name="M:Communicate.ComLink.BeginAsynReceive(Communicate.ComLink.DataReceivedHandler)">
            <summary>
            异步接收数据
            </summary>
            <param name="hander"></param>
        </member>
        <member name="M:Communicate.ComLink.EndAsynReceive">
            <summary>
            结束异步接收数据
            </summary>
        </member>
        <member name="M:Communicate.ComLink.Lock">
            <summary>
            上锁
            </summary>
        </member>
        <member name="M:Communicate.ComLink.UnLock">
            <summary>
            解锁
            </summary>
        </member>
        <member name="T:Communicate.ComMgr">
            <summary>
            串口系统管理类
            </summary>
        </member>
        <member name="F:Communicate.ComMgr.m_strDescribe">
            <summary>
            串口定义描述
            </summary>
        </member>
        <member name="F:Communicate.ComMgr.m_listComLink">
            <summary>
            串口定义列表
            </summary>
        </member>
        <member name="M:Communicate.ComMgr.ReadCfgFromXml(System.Xml.XmlDocument)">
            <summary>
            从xml文件中读取定义的串口信息
            </summary>
            <param name="doc">已打开的xml文档</param>
        </member>
        <member name="M:Communicate.ComMgr.UpdateGridFromParam(System.Windows.Forms.DataGridView)">
            <summary>
            跟新内存参数到表格数据
            </summary>
            <param name="grid">界面串口表格控件</param>
        </member>
        <member name="M:Communicate.ComMgr.UpdateParamFromGrid(System.Windows.Forms.DataGridView)">
            <summary>
            更新表格数据到内存参数
            </summary>
            <param name="grid">界面串口表格控件</param>
        </member>
        <member name="M:Communicate.ComMgr.SaveCfgXML(System.Xml.XmlDocument)">
            <summary>
            保存内存参数到xml文件
            </summary>
            <param name="doc">已打开的xml文档</param>
        </member>
        <member name="M:Communicate.ComMgr.GetComLink(System.Int32)">
            <summary>
            返回对应索引的对象
            </summary>
            <param name="nIndex">索引号</param>
            <returns></returns>
        </member>
        <member name="P:Communicate.ComMgr.Count">
            <summary>
            获取系统串口总数
            </summary>
            <returns></returns>
        </member>
        <member name="T:Communicate.OpcInfo">
            <summary>
            OPC Item信息
            </summary>
        </member>
        <member name="F:Communicate.OpcInfo.opcItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Communicate.OpcInfo.nHandleClient">
            <summary>
            
            </summary>
        </member>
        <member name="F:Communicate.OpcInfo.strValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Communicate.OpcInfo.nQuality">
            <summary>
            
            </summary>
        </member>
        <member name="F:Communicate.OpcInfo.strTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="M:Communicate.OpcInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Communicate.OpcLink">
            <summary>
            OPC通信类封装
            </summary>
        </member>
        <member name="P:Communicate.OpcLink.OpcConnected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Communicate.OpcLink.OpcGroup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Communicate.OpcLink.#ctor">
            <summary>
            枚举本地OPC服务器
            </summary>
        </member>
        <member name="P:Communicate.OpcLink.ServerNames">
            <summary>
            获取本地计算上的所有OPC服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Communicate.OpcLink.GetCurrentServerName">
            <summary>
            获取当前的OPC服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Communicate.OpcLink.GetServerInfo(System.DateTime@,System.String@)">
            <summary>
            获取当前OPC服务的信息
            </summary>
            <param name="StartTime">开始时间</param>
            <param name="strVersion">OPC版本</param>
        </member>
        <member name="M:Communicate.OpcLink.ConnectRemoteServer(System.String,System.String)">
            <summary>
            连接OPC服务器
            </summary>
            <param name="remoteServerIP">OPCServerIP</param>
            <param name="remoteServerName">OPCServer名称</param>
        </member>
        <member name="M:Communicate.OpcLink.Disconnect">
            <summary>
            断开OPC连接
            </summary>
        </member>
        <member name="M:Communicate.OpcLink.GetServerState">
            <summary>
            获取当前OPC服务的状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:Communicate.OpcLink.CreateGroup(System.String)">
            <summary>
            创建组
            </summary>
            <param name="groupName">组名称</param>
            <returns></returns>
        </member>
        <member name="M:Communicate.OpcLink.SetGroupProperty(System.Boolean,System.Single,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            设置组属性
            </summary>
        </member>
        <member name="M:Communicate.OpcLink.GetServerItems(System.Collections.Generic.List{System.String}@)">
            <summary>
            获取当前OPC服务的所有Item
            </summary>
            <param name="ls"></param>
        </member>
        <member name="M:Communicate.OpcLink.CreateItems(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="ar"></param>
            <param name="nItemHandleStart"></param>
        </member>
        <member name="M:Communicate.OpcLink.RemoveAllItems">
            <summary>
            移除所有的Item
            </summary>
        </member>
        <member name="M:Communicate.OpcLink.RemoveItem(System.String)">
            <summary>
            移除单个Item
            </summary>
            <param name="sTag">标签名称</param>
        </member>
        <member name="M:Communicate.OpcLink.KepGroup_DataChange(System.Int32,System.Int32,System.Array@,System.Array@,System.Array@,System.Array@)">
            <summary>
            OPC Item数据改变事件响应
            </summary>
            <param name="TransactionID"></param>
            <param name="NumItems"></param>
            <param name="ClientHandles"></param>
            <param name="ItemValues"></param>
            <param name="Qualities"></param>
            <param name="TimeStamps"></param>
        </member>
        <member name="M:Communicate.OpcLink.WriteValue(System.String,System.Object)">
            <summary>
            OPC 写Item数据
            </summary>
            <param name="strTagName">标签名称</param>
            <param name="_value">值</param>
        </member>
        <member name="M:Communicate.OpcLink.AsyncReadValue(System.String)">
            <summary>
            异步读数据
            </summary>
            <param name="strTagName">标签名称</param>
        </member>
        <member name="M:Communicate.OpcLink.ReadValue(System.String,System.Int32@)">
            <summary>
            同步读数据
            </summary>
            <param name="strTagName">标签名称</param>
            <param name="nQuality">质量</param>
            <returns>OPC Item数据</returns>
        </member>
        <member name="M:Communicate.OpcLink.GetValue(System.String)">
            <summary>
            获取OPC Item数据
            </summary>
            <param name="strTagName"></param>
            <returns>OPC Item数据</returns>
        </member>
        <member name="M:Communicate.OpcLink.GetOpcItem(System.String)">
            <summary>
            获取
            </summary>
            <param name="sTag"></param>
            <returns></returns>
        </member>
        <member name="T:Communicate.OpcMgr">
            <summary>
            OPC系统管理类
            </summary>
        </member>
        <member name="F:Communicate.OpcMgr.OPC_Hander_Start">
            <summary>
            OPC起始HANDLER
            </summary>
        </member>
        <member name="T:Communicate.OpcMgr.DataChangeHandler">
            <summary>
            数据变更委托函数定义
            </summary>
            <param name="TransactionID"></param>
            <param name="NumItems"></param>
            <param name="ClientHandles"></param>
            <param name="ItemValues"></param>
            <param name="Qualities"></param>
            <param name="TimeStamps"></param>
        </member>
        <member name="M:Communicate.OpcMgr.GetOpcLink">
            <summary>
            获取OpcLink对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Communicate.OpcMgr.OpcEnable">
            <summary>
            是否启用OPC
            </summary>
        </member>
        <member name="P:Communicate.OpcMgr.ServerIP">
            <summary>
            OPC服务器IP地址
            </summary>
        </member>
        <member name="P:Communicate.OpcMgr.ServerName">
            <summary>
            OPC服务器名称
            </summary>
        </member>
        <member name="P:Communicate.OpcMgr.GroupName">
            <summary>
            OPC群组名称
            </summary>
        </member>
        <member name="P:Communicate.OpcMgr.UpdateRate">
            <summary>
            更新频率
            </summary>
        </member>
        <member name="M:Communicate.OpcMgr.ReadCfgFromXml(System.Xml.XmlDocument)">
            <summary>
            从xml文件中读取定义的OPC信息
            </summary>
            <param name="doc">已打开的XML文件</param>
        </member>
        <member name="M:Communicate.OpcMgr.ReadDataByTag(System.String)">
            <summary>
            通过标签获取OPC数据
            </summary>
            <param name="sTag">标签名称</param>
            <returns></returns>
        </member>
        <member name="M:Communicate.OpcMgr.ReadDataByDesc(System.String)">
            <summary>
            通过描述获取OPC数据
            </summary>
            <param name="sDesc">描述</param>
            <returns></returns>
        </member>
        <member name="M:Communicate.OpcMgr.WriteDataByTag(System.String,System.Object)">
            <summary>
            通过标签写OPC数据
            </summary>
            <param name="sTag"></param>
            <param name="_value"></param>
        </member>
        <member name="M:Communicate.OpcMgr.WriteDataByDesc(System.String,System.Object)">
            <summary>
            通过描述写OPC数据
            </summary>
            <param name="sDesc"></param>
            <param name="_value"></param>
        </member>
        <member name="M:Communicate.OpcMgr.RegistorMsg(Communicate.OpcMgr.DataChangeHandler)">
            <summary>
            注册事件
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Communicate.OpcMgr.UpdateGridFromParam(System.Windows.Forms.DataGridView)">
            <summary>
            更新内存参数到表格数据
            </summary>
            <param name="grid">表格</param>
        </member>
        <member name="M:Communicate.OpcMgr.UpdateParamFromGrid(System.Windows.Forms.DataGridView)">
            <summary>
            更新表格数据到内存参数
            </summary>
            <param name="grid">表格</param>
        </member>
        <member name="M:Communicate.OpcMgr.SaveCfgXML(System.Xml.XmlDocument)">
            <summary>
            保存内存参数到xml文件
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Communicate.OpcMgr.GetOpcTagDesc(System.String)">
            <summary>
            根据标签名称获取标签描述
            </summary>
            <param name="sTag">标签名称</param>
            <returns></returns>
        </member>
        <member name="M:Communicate.OpcMgr.GetOpcTagName(System.String)">
            <summary>
            根据标签描述获取标签名称
            </summary>
            <param name="sTagDesc">标签描述</param>
            <returns></returns>
        </member>
        <member name="T:Communicate.TcpLink">
            <summary>
            网络连接封装类
            </summary>
        </member>
        <member name="F:Communicate.TcpLink.m_nIndex">
             <summary>
            网口号 
             </summary>
        </member>
        <member name="F:Communicate.TcpLink.m_strName">
             <summary>
            网口定义 
             </summary>
        </member>
        <member name="F:Communicate.TcpLink.m_strIP">
             <summary>
            对方IP地址 
             </summary>
        </member>
        <member name="F:Communicate.TcpLink.m_nPort">
             <summary>
            端口号 
             </summary>
        </member>
        <member name="F:Communicate.TcpLink.m_nTime">
             <summary>
            超时时间,单位毫秒
             </summary>
        </member>
        <member name="F:Communicate.TcpLink.m_strLineFlag">
             <summary>
            命令分隔 
             </summary>
        </member>
        <member name="F:Communicate.TcpLink.m_strLine">
             <summary>
            命令分隔符 
             </summary>
        </member>
        <member name="T:Communicate.TcpLink.DataReceivedHandler">
            <summary>
            异步接收数据委托
            </summary>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="E:Communicate.TcpLink.DataReceivedEvent">
            <summary>
            异步接收数据事件
            </summary>
        </member>
        <member name="P:Communicate.TcpLink.ErrorReport">
            <summary>
            是否需要错误报警
            </summary>
        </member>
        <member name="P:Communicate.TcpLink.IsConnecting">
            <summary>
            是否正在连接
            </summary>
        </member>
        <member name="T:Communicate.TcpLink.StateChangedHandler">
            <summary>
            状态变更委托函数定义
            </summary>
            <param name="tcp"></param>
        </member>
        <member name="E:Communicate.TcpLink.StateChangedEvent">
            <summary>
            状态变更委托事件
            </summary>
        </member>
        <member name="M:Communicate.TcpLink.#ctor(System.Int32,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="nIndex"></param>
            <param name="strName"></param>
            <param name="strIP"></param>
            <param name="nPort"></param>
            <param name="nTimeMs"></param>
            <param name="strLine"></param>
        </member>
        <member name="M:Communicate.TcpLink.IsTimeOut">
            <summary>
            判断是否超时
            </summary>
            <returns></returns>
        </member>
        <member name="M:Communicate.TcpLink.CallBackMethod(System.IAsyncResult)">
             <summary>
            网口打开时通过回调检测是否连接超时。 5秒种 
             </summary>
             <param name="asyncResult"></param>
        </member>
        <member name="M:Communicate.TcpLink.Open">
             <summary>
            打开网口 
             </summary>
             <returns></returns>
        </member>
        <member name="M:Communicate.TcpLink.IsOpen">
            <summary>
            判断网口是否打开
            </summary>
            <returns></returns>
        </member>
        <member name="M:Communicate.TcpLink.WriteData(System.Byte[],System.Int32)">
             <summary>
            向网口写入数据 
             </summary>
             <param name="sendBytes"></param>
             <param name="nLen"></param>
             <returns></returns>
        </member>
        <member name="M:Communicate.TcpLink.WriteString(System.String)">
             <summary>
            向网口写入字符串 
             </summary>
             <param name="strData"></param>
             <returns></returns>
        </member>
        <member name="M:Communicate.TcpLink.WriteLine(System.String)">
             <summary>
            向网口写入一行字符 
             </summary>
             <param name="strData"></param>
             <returns></returns>
        </member>
        <member name="M:Communicate.TcpLink.ReadData(System.Byte[],System.Int32,System.Boolean)">
             <summary>
            从网口读取数据 
             </summary>
             <param name="bytes"></param>
             <param name="nLen"></param>
             <param name="bWait">等待接收完全</param>
             <returns></returns>
        </member>
        <member name="M:Communicate.TcpLink.ReadLine(System.String@)">
             <summary>
            从网口读取一行数据 
             </summary>
             <param name="strData"></param>
             <returns></returns>
        </member>
        <member name="M:Communicate.TcpLink.Close">
             <summary>
            关闭网口 
             </summary>
        </member>
        <member name="M:Communicate.TcpLink.ClearBuffer">
            <summary>
            清除缓冲区
            </summary>
        </member>
        <member name="M:Communicate.TcpLink.BeginAsynReceive(Communicate.TcpLink.DataReceivedHandler)">
            <summary>
            开始异步接收数据
            </summary>
        </member>
        <member name="M:Communicate.TcpLink.EndAsynReceive">
            <summary>
            停止异步接收数据
            </summary>
        </member>
        <member name="M:Communicate.TcpLink.ReceiveMessage(System.IAsyncResult)">
            <summary>
            接收数据
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Communicate.TcpLink.Lock">
            <summary>
            互锁
            </summary>
        </member>
        <member name="M:Communicate.TcpLink.UnLock">
            <summary>
            取消互锁
            </summary>
        </member>
        <member name="T:Communicate.TcpMgr">
            <summary>
            网口类管理器
            </summary>
        </member>
        <member name="F:Communicate.TcpMgr.m_strDescribe">
            <summary>
            网口描述定义
            </summary>
        </member>
        <member name="F:Communicate.TcpMgr.m_listTcpLink">
            <summary>
            网络连接列表
            </summary>
        </member>
        <member name="M:Communicate.TcpMgr.GetTcpLink(System.Int32)">
            <summary>
            返回对应索引号的对象
            </summary>
            <param name="index">网口索引号</param>
            <returns></returns>
        </member>
        <member name="P:Communicate.TcpMgr.Count">
            <summary>
            获取系统中网络连接总数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Communicate.TcpMgr.ReadCfgFromXml(System.Xml.XmlDocument)">
            <summary>
            从xml文件中读取定义的网口信息
            </summary>
            <param name="doc">已打开的xml文档</param>
        </member>
        <member name="M:Communicate.TcpMgr.UpdateGridFromParam(System.Windows.Forms.DataGridView)">
            <summary>
            跟新内存参数到表格数据
            </summary>
            <param name="grid">界面网口表格控件</param>
        </member>
        <member name="M:Communicate.TcpMgr.UpdateParamFromGrid(System.Windows.Forms.DataGridView)">
            <summary>
            跟新表格数据到内存参数
            </summary>
            <param name="grid">界面网口表格控件</param>
        </member>
        <member name="M:Communicate.TcpMgr.SaveCfgXML(System.Xml.XmlDocument)">
            <summary>
            保存内存参数到xml文件
            </summary>
            <param name="doc">已打开的xml文档</param>
        </member>
        <member name="T:Communicate.AsyncSocketTCPServer">
            <summary>
            Socket实现的异步TCP服务器
            </summary>
        </member>
        <member name="F:Communicate.AsyncSocketTCPServer.m_nMaxClient">
            <summary>
            服务器程序同意的最大客户端连接数
            </summary>
        </member>
        <member name="F:Communicate.AsyncSocketTCPServer.m_nClientCount">
            <summary>
            当前的连接的客户端数
            </summary>
        </member>
        <member name="F:Communicate.AsyncSocketTCPServer.m_serverSock">
            <summary>
            服务器使用的异步socket
            </summary>
        </member>
        <member name="F:Communicate.AsyncSocketTCPServer.m_listClients">
            <summary>
            客户端会话列表
            </summary>
        </member>
        <member name="P:Communicate.AsyncSocketTCPServer.IsRunning">
            <summary>
            服务器是否正在执行
            </summary>
        </member>
        <member name="P:Communicate.AsyncSocketTCPServer.Address">
            <summary>
            监听的IP地址
            </summary>
        </member>
        <member name="P:Communicate.AsyncSocketTCPServer.Port">
            <summary>
            监听的port
            </summary>
        </member>
        <member name="P:Communicate.AsyncSocketTCPServer.Encoding">
            <summary>
            通信使用的编码
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.#ctor(System.Int32)">
            <summary>
            异步Socket TCP服务器
            </summary>
            <param name="listenPort">监听的port</param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            异步Socket TCP服务器
            </summary>
            <param name="ip"></param>
            <param name="lisenPort">监听的port</param>
            <param name="maxClient">最大监听数量</param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.#ctor(System.Net.IPEndPoint)">
            <summary>
            异步Socket TCP服务器
            </summary>
            <param name="localEP">监听的终结点</param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            异步Socket TCP服务器
            </summary>
            <param name="localIPAddress">监听的IP地址</param>
            <param name="listenPort">监听的port</param>
            <param name="maxClient">最大客户端数量</param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Start">
            <summary>
            启动服务器
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Start(System.Int32)">
            <summary>
            启动服务器
            </summary>
            <param name="backlog">
            服务器所同意的挂起连接序列的最大长度
            </param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Stop">
            <summary>
            停止服务器
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.HandleAcceptConnected(System.IAsyncResult)">
            <summary>
            处理客户端连接
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.HandleDataReceived(System.IAsyncResult)">
            <summary>
            处理客户端数据
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Broadcast(System.Byte[])">
            <summary>
            广播数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Broadcast(System.String)">
            <summary>
            广播数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Send(Communicate.AsyncSocketState,System.Byte[])">
            <summary>
            发送数据
            </summary>
            <param name="state">接收数据的客户端会话</param>
            <param name="data">数据报文</param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Send(Communicate.AsyncSocketState,System.String)">
            <summary>
            发送字符串数据
            </summary>
            <param name="state"></param>
            <param name="strData"></param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Send(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            异步发送数据至指定的客户端
            </summary>
            <param name="client">客户端</param>
            <param name="data">报文</param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.SendDataEnd(System.IAsyncResult)">
            <summary>
            发送数据完成处理函数
            </summary>
            <param name="ar">目标客户端Socket</param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.ToString">
            <summary>
            获取EndPoint字符串
            </summary>
            <returns></returns>
        </member>
        <member name="E:Communicate.AsyncSocketTCPServer.ClientConnected">
            <summary>
            与客户端的连接已建立事件
            </summary>
        </member>
        <member name="E:Communicate.AsyncSocketTCPServer.ClientDisconnected">
            <summary>
            与客户端的连接已断开事件
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.RaiseClientConnected(Communicate.AsyncSocketState)">
            <summary>
            触发客户端连接事件
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.RaiseClientDisconnected(Communicate.AsyncSocketState)">
            <summary>
            触发客户端连接断开事件
            </summary>
            <param name="state"></param>
        </member>
        <member name="E:Communicate.AsyncSocketTCPServer.DataReceived">
            <summary>
            接收到数据事件
            </summary>
        </member>
        <member name="E:Communicate.AsyncSocketTCPServer.PrepareSend">
            <summary>
            发送数据前的事件
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.RaisePrepareSend(Communicate.AsyncSocketState)">
            <summary>
            触发发送数据前的事件
            </summary>
            <param name="state"></param>
        </member>
        <member name="E:Communicate.AsyncSocketTCPServer.CompletedSend">
            <summary>
            数据发送完成事件
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.RaiseCompletedSend(Communicate.AsyncSocketState)">
            <summary>
            触发数据发送完成的事件
            </summary>
            <param name="state"></param>
        </member>
        <member name="E:Communicate.AsyncSocketTCPServer.NetError">
            <summary>
            网络错误事件
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.RaiseNetError(Communicate.AsyncSocketState)">
            <summary>
            触发网络错误事件
            </summary>
            <param name="state"></param>
        </member>
        <member name="E:Communicate.AsyncSocketTCPServer.ServerStateChangedEvent">
            <summary>
            服务连接状态事件
            </summary>
        </member>
        <member name="E:Communicate.AsyncSocketTCPServer.OtherException">
            <summary>
            异常事件
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.RaiseOtherException(Communicate.AsyncSocketState,System.String)">
            <summary>
            触发异常事件
            </summary>
            <param name="state"></param>
            <param name="descrip"></param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Close(Communicate.AsyncSocketState)">
            <summary>
            关闭一个与客户端之间的会话
            </summary>
            <param name="state">须要关闭的客户端会话对象</param>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.CloseAllClient">
            <summary>
            关闭全部的客户端会话,与全部的客户端连接会断开
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, 
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketTCPServer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release 
            both managed and unmanaged resources; <c>false</c> 
            to release only unmanaged resources.</param>
        </member>
        <member name="T:Communicate.AsyncSocketEventArgs">
            <summary>
            异步Socket TCP事件參数类
            </summary>
        </member>
        <member name="F:Communicate.AsyncSocketEventArgs.m_strMsg">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="F:Communicate.AsyncSocketEventArgs.m_state">
            <summary>
            client状态封装类
            </summary>
        </member>
        <member name="P:Communicate.AsyncSocketEventArgs.IsHandled">
            <summary>
            是否已经处理过了
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketEventArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Communicate.AsyncSocketEventArgs.#ctor(Communicate.AsyncSocketState)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Communicate.AsyncSocketEventArgs.#ctor(System.String,Communicate.AsyncSocketState)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="state"></param>
        </member>
        <member name="T:Communicate.AsyncSocketState">
            <summary>
            异步SOCKET TCP 中用来存储客户端状态信息的类
            </summary>
        </member>
        <member name="F:Communicate.AsyncSocketState.m_byRecvBuffer">
            <summary>
            接收数据缓冲区
            </summary>
        </member>
        <member name="F:Communicate.AsyncSocketState.m_nLength">
            <summary>
            接收数据的长度
            </summary>
        </member>
        <member name="F:Communicate.AsyncSocketState.m_strDatagram">
            <summary>
            客户端发送到server的报文
            注意:在有些情况下报文可能仅仅是报文的片断而不完整
            </summary>
        </member>
        <member name="F:Communicate.AsyncSocketState.m_clientSock">
            <summary>
            客户端的Socket
            </summary>
        </member>
        <member name="P:Communicate.AsyncSocketState.RecvDataBuffer">
            <summary>
            接收数据缓冲区 
            </summary>
        </member>
        <member name="P:Communicate.AsyncSocketState.Length">
            <summary>
            接收数据的长度
            </summary>
        </member>
        <member name="P:Communicate.AsyncSocketState.Datagram">
            <summary>
            存取会话的报文
            </summary>
        </member>
        <member name="P:Communicate.AsyncSocketState.ClientSocket">
            <summary>
            获得与客户端会话关联的Socket对象
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketState.#ctor(System.Net.Sockets.Socket)">
            <summary>
            构造函数
            </summary>
            <param name="cliSock">会话使用的Socket连接</param>
        </member>
        <member name="M:Communicate.AsyncSocketState.InitBuffer">
            <summary>
            初始化数据缓冲区
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketState.Close">
            <summary>
            关闭会话
            </summary>
        </member>
        <member name="M:Communicate.AsyncSocketState.ToString">
            <summary>
            获取EndPoint字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Communicate.TcpServerMgr">
            <summary>
            TCP服务管理类
            </summary>
        </member>
        <member name="F:Communicate.TcpServerMgr.m_strDescribe">
            <summary>
            网口描述定义
            </summary>
        </member>
        <member name="F:Communicate.TcpServerMgr.m_listServers">
            <summary>
            所有服务集合
            </summary>
        </member>
        <member name="F:Communicate.TcpServerMgr.m_dictClients">
            <summary>
            所有连接上的客户端
            </summary>
        </member>
        <member name="E:Communicate.TcpServerMgr.ClientConnected">
            <summary>
            客户端连接
            </summary>
        </member>
        <member name="E:Communicate.TcpServerMgr.ClientDisconnected">
            <summary>
            客户端断开连接
            </summary>
        </member>
        <member name="E:Communicate.TcpServerMgr.ServerStateChanged">
            <summary>
            服务端状态改变事件
            </summary>
        </member>
        <member name="M:Communicate.TcpServerMgr.GetTcpServer(System.Int32)">
            <summary>
            获取TCP服务
            </summary>
            <param name="index">索引号</param>
            <returns></returns>
        </member>
        <member name="P:Communicate.TcpServerMgr.Count">
            <summary>
            获取服务数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Communicate.TcpServerMgr.Clear">
            <summary>
            清除服务
            </summary>
        </member>
        <member name="M:Communicate.TcpServerMgr.ReadCfgFromXml(System.Xml.XmlDocument)">
            <summary>
            从xml文件中读取定义的网口信息
            </summary>
            <param name="doc">已打开的xml文档</param>
        </member>
        <member name="M:Communicate.TcpServerMgr.GetClient(System.String)">
            <summary>
            根据EndPoint字符串获取客户端
            </summary>
            <param name="strEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Communicate.TcpServerMgr.SendAsync(System.String,System.String)">
            <summary>
            异步发送数据
            </summary>
            <param name="strEndPoint"></param>
            <param name="strData"></param>
            <returns></returns>
        </member>
        <member name="M:Communicate.TcpServerMgr.UpdateGridFromParam(System.Windows.Forms.DataGridView)">
            <summary>
            更新内存参数到表格数据
            </summary>
            <param name="grid">界面网口表格控件</param>
        </member>
        <member name="M:Communicate.TcpServerMgr.UpdateParamFromGrid(System.Windows.Forms.DataGridView)">
            <summary>
            更新表格数据到内存参数
            </summary>
            <param name="grid">界面网口表格控件</param>
        </member>
        <member name="M:Communicate.TcpServerMgr.SaveCfgXML(System.Xml.XmlDocument)">
            <summary>
            保存内存参数到xml文件
            </summary>
            <param name="doc">已打开的xml文档</param>
        </member>
    </members>
</doc>
