<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="11.0.0.1" cs="901973094">
<procedure name="main">
<interface/>
<body>
<c></c>
<l>dev_open_window(0, 0, 800, 640, 'black', window)</l>
<l>dev_set_draw('margin')</l>
<l>nSelect := 'T5'</l>
<l>Product := 'RCam'</l>
<l>dir := 'F:/Ver C/AutoFrame/Exe/VisionConfig/' </l>
<l>dir := dir + Product +'/'+ nSelect</l>
<c></c>
<l>InitTemplete (dir , ModelId, ModelData)      </l>
<c></c>
<l>nTotal := 0</l>
<l>nFailCount := 0</l>
<c></c>
<l>dirTest := 'D:/exe/Image/RawImage/20170901/T5_ok'</l>
<l>*  dirTest := 'D:/test'</l>
<l>list_files (dir,['files','recursive','follow_links'], ImageFiles)</l>
<l>tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|\
                     jp2|png|pcx|pgm|ppm|pbm|xwd|ima)$',\
                     'ignore_case'], ImageFiles)</l>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    read_image (Image, ImageFiles[Index])   </l>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,1]" as_ord="1">    * Image Acquisition 02: Code generated by Image Acquisition 02</c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2,1]" as_ord="1">*     open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'Cam_4', 0, -1, AcqHandle)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,2]" as_ord="1">*     while (true)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,3]" as_ord="1">*     grab_image (Image, AcqHandle)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,4]" as_ord="1">    * Image Acquisition 02: Do something</c>
<c>    </c>
<c>    </c>
<l>    dev_display(Image)</l>
<l>    if(nSelect == 'T1')         </l>
<c>        *首先通过模板查找及圆拟合获得产品的中心点和座标变换工具</c>
<l>*         dir := 'F:/FPC Coating/AutoFrame/Exe/VisionConfig/' </l>
<l>*         dir := dir + Product +'/'+ nSelect</l>
<l>        T1 (Image, dir, ModelId, ModelData, TupleResult)</l>
<l>            elseif (nSelect == 'T1_1')</l>
<l>        T1_1 (Image, dir, ModelId, ModelData, TupleResult)</l>
<c></c>
<l>    elseif (nSelect == 'T2_1')</l>
<l>        T2_1 (Image, dir, ModelId, ModelData, TupleResult)</l>
<c></c>
<l>     elseif (nSelect == 'T2')</l>
<l>        T2 (Image, dir, ModelId, ModelData, TupleResult)</l>
<l>*         CalcRotatePoint(1,1,2,2,3,rr,cc)</l>
<l>*         CalcRotateCenter(1,1,2,2,3,rr,cc)    </l>
<l>    elseif (nSelect == 'T3')</l>
<l>        T3 (Image, dir, ModelId, ModelData, TupleResult)</l>
<l>    elseif (nSelect == 'T4')</l>
<l>        T4(Image, dir ,ModelId, ModelData, TupleResult)            </l>
<l>    elseif (nSelect == 'T5')</l>
<l>        T5 (Image, dir, ModelId, ModelData, TupleResult)</l>
<c>        </c>
<l>    endif</l>
<l>        dev_disp_message('ret = '+TupleResult[0],'window', 200, 20 ,'red', 'true')</l>
<l>*     stop()</l>
<l>*     endwhile</l>
<l>*     close_framegrabber (AcqHandle)</l>
<l>    if(|TupleResult|&lt;2)</l>
<l>*         write_image(Image, 'bmp', 0, 'd:/test/'+ Index )</l>
<l>    endif</l>
<l>*     wait_seconds(0.1)</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="T1">
<interface>
<io>
<par name="Image"/>
</io>
<ic>
<par name="Directory"/>
<par name="ModelId"/>
<par name="ModelData"/>
</ic>
<oc>
<par name="TupleResult"/>
</oc>
</interface>
<body>
<l>TupleResult := -999 </l>
<c></c>
<c>*进行模板查找</c>
<l>FindTemplete (Image, ModelId, ModelData, Score, FixTool)</l>
<l>if(|Score| &gt; 0)</l>
<c>    </c>
<c>    *读取第一个ROI,圆环  </c>
<l>    ReadRoiAnnularCircle (Directory +  '/Circle.roi', RoiDataIn)</l>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut) </l>
<c>    *查找圆,方向outer指定由外向内,以大圆半径为中心,100个点,可排除20个干扰点,阈值5,</c>
<c>    *平滑系数0.4, 由白到黑,取第一点</c>
<l>      FindCircle (Image, RoiDataOut, 'inner', 100, 20, 18, 0.6,\
                'negative', 'first', Row, Col, Radius)</l>
<c> </c>
<l>    if(|Row| = 0)</l>
<l>        TupleResult := -998</l>
<l>        return()</l>
<l>    endif</l>
<l>    gen_cross_contour_xld (Cross, Row, Col, 60, 0.785398)</l>
<l>    dev_display(Cross)</l>
<l>    dev_disp_message( 'Row= '+ Row, 'window', 40, 20, 'green', 'false')</l>
<l>    dev_disp_message ('Col= '+ Col, 'window', 60, 20, 'green', 'false')</l>
<l>    dev_disp_message ('Radius= '+ Radius, 'window', 80, 20, 'green', 'false')</l>
<c>    </c>
<l>    TupleResult := [1, Row, Col]          </l>
<c>    *                  </c>
<l>else</l>
<c>    *模板查找失败</c>
<l>    TupleResult := -999 </l>
<l>endif</l>
<c></c>
<l>return ()</l>
<c></c>
</body>
<docu id="T1">
<abstract lang="zh_CN">图像处理过程，函数内的过程可以添加修改。</abstract>
<short lang="zh_CN">图像处理过程。</short>
<parameters>
<parameter id="Directory">
<description lang="zh_CN">ROI文件路径。</description>
<sem_type>string</sem_type>
</parameter>
<parameter id="Image">
<description lang="zh_CN">输入图形变量。</description>
<sem_type>image</sem_type>
</parameter>
<parameter id="ModelData">
<description lang="zh_CN">模板的数据。</description>
<sem_type>number</sem_type>
</parameter>
<parameter id="ModelId">
<description lang="zh_CN">模板的句柄。</description>
<sem_type>integer</sem_type>
</parameter>
<parameter id="TupleResult">
<description lang="zh_CN">得到的结果数据。</description>
<sem_type>number</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="T2">
<interface>
<io>
<par name="Image"/>
</io>
<ic>
<par name="Directory"/>
<par name="ModelId"/>
<par name="ModelData"/>
</ic>
<oc>
<par name="TupleResult"/>
</oc>
</interface>
<body>
<c>*先赋值，以免发生异常后读取非法内存</c>
<l>TupleResult := -999 </l>
<c></c>
<l>FindTemplete (Image, ModelId, ModelData, Score, FixTool)</l>
<l>if(|Score| &gt; 0)  </l>
<c>    *读取第一个ROI,圆环  </c>
<l>    ReadRoiAnnularCircle (Directory +  '/Circle.roi', RoiDataIn)</l>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut) </l>
<c>    *查找圆,方向outer指定由外向内,以大圆半径为中心,100个点,可排除20个干扰点,阈值5,</c>
<c>    *平滑系数0.4, 由白到黑,取第一点</c>
<l>    FindCircle (Image, RoiDataOut, 'inner', 100, 20, 5, 0.4,\
                'positive', 'first', Row, Col, Radius)</l>
<c>    </c>
<l>    if(|Row| = 0)</l>
<l>        TupleResult := -998</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>    gen_cross_contour_xld(Cross,Row, Col, 60, 0)</l>
<l>    dev_display(Cross)</l>
<l>       dev_disp_message( 'Row= '+ Row, 'window', 40, 20, 'green', 'false')</l>
<l>    dev_disp_message ('Col= '+ Col, 'window', 60, 20, 'green', 'false')</l>
<l>        dev_disp_message ('Radius= '+ Radius, 'window', 80, 20, 'green', 'false')</l>
<c></c>
<c>    *读取第二个ROI,旋转矩形,带方向角度   </c>
<l>    ReadRoiRectangle2 (Directory + '/line.roi', RoiDataIn)</l>
<c>    </c>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut)</l>
<c>    *查找直线,位置由旋转矩形来确定,方向由ROI旋转矩形确定,100个点,</c>
<c>    *阈值15,平滑系数0.4, 由黑到白,取第一个边缘点</c>
<l>    FindLine (Image, RoiDataOut, 60, 20, 20, 10, 0.4, 'negative', 'first', RowBegin1, ColBegin1, RowEnd1, ColEnd1)</l>
<l>    angle_lx(RowBegin1, ColBegin1, RowEnd1, ColEnd1, Angle)</l>
<l>    Angle := deg(Angle)</l>
<l>    if(|RowBegin1| = 0)</l>
<l>        TupleResult := -997</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    dev_disp_message( 'Angle= '+ Angle, 'window', 100, 20, 'green', 'false')</l>
<c>    </c>
<l>    TupleResult := [1, Row, Col, Angle]     </l>
<c>    </c>
<l>else</l>
<c>    *模板查找失败</c>
<l>    TupleResult := -999   </l>
<c>    </c>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="T2">
<abstract lang="zh_CN">图像处理过程，函数内的过程可以添加修改。</abstract>
<short lang="zh_CN">图像处理过程。</short>
<parameters>
<parameter id="Directory">
<description lang="zh_CN">ROI文件路径。</description>
<sem_type>string</sem_type>
</parameter>
<parameter id="Image">
<description lang="zh_CN">输入图形变量。</description>
<sem_type>image</sem_type>
</parameter>
<parameter id="ModelData">
<description lang="zh_CN">模板的数据。</description>
<sem_type>number</sem_type>
</parameter>
<parameter id="ModelId">
<description lang="zh_CN">模板的句柄。</description>
<sem_type>integer</sem_type>
</parameter>
<parameter id="TupleResult">
<description lang="zh_CN">得到的结果数据。</description>
<sem_type>number</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="T3">
<interface>
<io>
<par name="Image"/>
</io>
<ic>
<par name="Directory"/>
<par name="ModelId"/>
<par name="ModelData"/>
</ic>
<oc>
<par name="TupleResult"/>
</oc>
</interface>
<body>
<c>*先赋值，以免发生异常后读取非法内存</c>
<l>TupleResult := -999 </l>
<c></c>
<l>FindTemplete (Image, ModelId, ModelData, Score, FixTool)</l>
<l>if(|Score| &gt; 0)  </l>
<c>    *读取第一个ROI,圆环  </c>
<l>    ReadRoiAnnularCircle (Directory +  '/Circle.roi', RoiDataIn)</l>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut) </l>
<c>    *查找圆,方向outer指定由外向内,以大圆半径为中心,100个点,可排除20个干扰点,阈值5,</c>
<c>    *平滑系数0.4, 由白到黑,取第一点</c>
<l>    FindCircle (Image, RoiDataOut, 'inner', 100, 20, 15, 0.4,\
                'negative', 'first', Row, Col, Radius)</l>
<c>    </c>
<l>    if(|Row| = 0)</l>
<l>        TupleResult := -998</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>    gen_cross_contour_xld(Cross,Row, Col, 60, 0)</l>
<l>    dev_display(Cross)</l>
<l>        dev_disp_message ('row= '+ Row, 'window', 40, 20, 'green', 'false')</l>
<l>    dev_disp_message ('col= '+ Col, 'window', 60, 20, 'green', 'false')</l>
<c>    </c>
<l>        dev_disp_message ('Radius= '+ Radius, 'window', 80, 20, 'green', 'false')</l>
<c></c>
<c>    *读取第二个ROI,旋转矩形,带方向角度   </c>
<l>    ReadRoiRectangle2 (Directory + '/line.roi', RoiDataIn)</l>
<c>    </c>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut)</l>
<c>    *查找直线,位置由旋转矩形来确定,方向由ROI旋转矩形确定,100个点,</c>
<c>    *阈值15,平滑系数0.4, 由黑到白,取第一个边缘点</c>
<l>    FindLine (Image, RoiDataOut, 60, 20, 20, 10, 0.4, 'negative', 'first', RowBegin1, ColBegin1, RowEnd1, ColEnd1)</l>
<l>    if(|RowBegin1| = 0)</l>
<l>        TupleResult := [1, Row, Col, 90] </l>
<l>        return()</l>
<l>    endif</l>
<l>    angle_lx(RowBegin1, ColBegin1, RowEnd1, ColEnd1, Angle)</l>
<l>    Angle := deg(Angle)</l>
<c></c>
<c> </c>
<l>    dev_disp_message( 'Angle= '+ Angle, 'window', 100, 20, 'green', 'false')</l>
<c>    </c>
<l>    TupleResult := [1, Row, Col, Angle]     </l>
<c>    </c>
<l>else</l>
<c>    *模板查找失败</c>
<l>    TupleResult := -999   </l>
<c>    </c>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="T3">
<abstract lang="zh_CN">图像处理过程，函数内的过程可以添加修改。</abstract>
<short lang="zh_CN">图像处理过程。</short>
<parameters>
<parameter id="Directory">
<description lang="zh_CN">ROI文件路径。</description>
<sem_type>string</sem_type>
</parameter>
<parameter id="Image">
<description lang="zh_CN">输入图形变量。</description>
<sem_type>image</sem_type>
</parameter>
<parameter id="ModelData">
<description lang="zh_CN">模板的数据。</description>
<sem_type>number</sem_type>
</parameter>
<parameter id="ModelId">
<description lang="zh_CN">模板的句柄。</description>
<sem_type>integer</sem_type>
</parameter>
<parameter id="TupleResult">
<description lang="zh_CN">得到的结果数据。</description>
<sem_type>number</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="T4">
<interface>
<io>
<par name="Image"/>
</io>
<ic>
<par name="Directory"/>
<par name="ModelId"/>
<par name="ModelData"/>
</ic>
<oc>
<par name="TupleResult"/>
</oc>
</interface>
<body>
<c>*先赋值，以免发生异常后读取非法内存</c>
<l>TupleResult := -999 </l>
<c></c>
<l>FindTemplete (Image, ModelId, ModelData, Score, FixTool)</l>
<l>if(|Score| &gt; 0)  </l>
<c>    *读取第二个ROI,旋转矩形,带方向角度   </c>
<l>    ReadRoiRectangle2 (Directory + '/line.roi', RoiDataIn)</l>
<c>    </c>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut)</l>
<c>    *查找直线,位置由旋转矩形来确定,方向由ROI旋转矩形确定,100个点,</c>
<c>    *阈值15,平滑系数0.4, 由黑到白,取第一个边缘点</c>
<l>    FindLine (Image, RoiDataOut, 60, 20, 20, 8, 0.4, 'negative', 'first', RowBegin1, ColBegin1, RowEnd1, ColEnd1)</l>
<l>    angle_lx( RowBegin1, ColBegin1,RowEnd1, ColEnd1, Angle)</l>
<l>    Angle := deg(Angle)</l>
<l>    if(|RowBegin1| = 0)</l>
<l>        TupleResult := -997</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    *读取第一个ROI,圆环  </c>
<l>    ReadRoiAnnularCircle (Directory +  '/Circle.roi', RoiDataIn)</l>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut) </l>
<c>    *查找圆,方向outer指定由外向内,以大圆半径为中心,100个点,可排除20个干扰点,阈值5,</c>
<c>    *平滑系数0.4, 由白到黑,取第一点</c>
<l>    FindCircle (Image, RoiDataOut, 'outer', 100, 20, 15, 0.4,\
                'negative', 'first', Row, Col, Radius)</l>
<c>    </c>
<c>    </c>
<l>    if(|Row| = 0 )</l>
<c>        </c>
<l>        RoiDataOut[2] := RoiDataOut[2] -15</l>
<l>        RoiDataOut[5] := RoiDataOut[5] -45</l>
<c>        </c>
<l>        FindCircle (Image, RoiDataOut, 'inner', 100, 20, 5, 0.4,\
                    'positive', 'first', Row, Col, Radius2)  </l>
<c>        </c>
<l>        if(|Row| = 0)   </l>
<l>            TupleResult := -998</l>
<l>            return()</l>
<l>        endif</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    gen_cross_contour_xld(Cross,Row, Col, 60, 0)</l>
<l>    dev_display(Cross)</l>
<l>    dev_disp_message ('row= '+ Row, 'window', 40, 20, 'green', 'false')</l>
<l>    dev_disp_message ('col= '+ Col, 'window', 60, 20, 'green', 'false')</l>
<l>    dev_disp_message ('Radius= '+ Radius, 'window', 80, 20, 'green', 'false')</l>
<c>    </c>
<l>    dev_disp_message( 'Angle= '+ Angle, 'window', 100, 20, 'green', 'false')</l>
<c>    </c>
<l>    TupleResult := [1, Row, Col, Angle]     </l>
<c>    </c>
<l>else</l>
<c>    *模板查找失败</c>
<l>    TupleResult := -999   </l>
<c>    </c>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="T4">
<abstract lang="zh_CN">图像处理过程，函数内的过程可以添加修改。</abstract>
<short lang="zh_CN">图像处理过程。</short>
<parameters>
<parameter id="Directory">
<description lang="zh_CN">ROI文件路径。</description>
<sem_type>string</sem_type>
</parameter>
<parameter id="Image">
<description lang="zh_CN">输入图形变量。</description>
<sem_type>image</sem_type>
</parameter>
<parameter id="ModelData">
<description lang="zh_CN">模板的数据。</description>
<sem_type>number</sem_type>
</parameter>
<parameter id="ModelId">
<description lang="zh_CN">模板的句柄。</description>
<sem_type>integer</sem_type>
</parameter>
<parameter id="TupleResult">
<description lang="zh_CN">得到的结果数据。</description>
<sem_type>number</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="T5">
<interface>
<io>
<par name="Image"/>
</io>
<ic>
<par name="Directory"/>
<par name="ModelId"/>
<par name="ModelData"/>
</ic>
<oc>
<par name="TupleResult"/>
</oc>
</interface>
<body>
<c>*先赋值，以免发生异常后读取非法内存</c>
<l>TupleResult := -999 </l>
<c></c>
<l>FindTemplete (Image, ModelId, ModelData, Score, FixTool)</l>
<l>if(|Score| &gt; 0)  </l>
<c>    *读取第一个ROI,圆环  </c>
<l>    ReadRoiAnnularCircle (Directory +  '/Circle.roi', RoiDataIn)</l>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut) </l>
<c>    *查找圆,方向outer指定由外向内,以大圆半径为中心,100个点,可排除20个干扰点,阈值5,</c>
<c>    *平滑系数0.4, 由白到黑,取第一点</c>
<l>    FindCircle (Image, RoiDataOut, 'outer', 100, 20, 12, 0.4,\
                'negative', 'first', Row, Col, Radius)</l>
<c>    </c>
<l>    if(|Row| = 0)</l>
<l>        TupleResult := -998</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>    gen_cross_contour_xld(Cross,Row, Col, 60, 0)</l>
<l>    dev_display(Cross)</l>
<l>        dev_disp_message ('row= '+ Row, 'window', 40, 20, 'green', 'false')</l>
<l>    dev_disp_message ('col= '+ Col, 'window', 60, 20, 'green', 'false')</l>
<l>      dev_disp_message ('Radius= '+ Radius, 'window', 80, 20, 'green', 'false')</l>
<c>  </c>
<c>    *读取第二个ROI,旋转矩形,带方向角度   </c>
<l>    ReadRoiRectangle2 (Directory + '/line.roi', RoiDataIn)</l>
<c>    </c>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut)</l>
<c>    *查找直线,位置由旋转矩形来确定,方向由ROI旋转矩形确定,100个点,</c>
<c>    *阈值15,平滑系数0.4, 由黑到白,取第一个边缘点</c>
<l>    FindLine (Image, RoiDataOut, 60, 20, 30, 20, 0.4, 'negative', 'first', RowBegin1, ColBegin1, RowEnd1, ColEnd1)</l>
<l>    angle_lx( RowBegin1, ColBegin1,RowEnd1, ColEnd1, Angle)</l>
<l>     Angle := deg(Angle)</l>
<l>    if(|RowBegin1| = 0)</l>
<l>        TupleResult := -997</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<c></c>
<c>    </c>
<l>    dev_disp_message( 'Angle= '+ Angle, 'window', 100, 20, 'green', 'false')</l>
<c>    </c>
<l>    TupleResult := [1, Row, Col, Angle]     </l>
<c>    </c>
<l>else</l>
<c>    *模板查找失败</c>
<l>    TupleResult := -999   </l>
<c>    </c>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="T5">
<abstract lang="zh_CN">图像处理过程，函数内的过程可以添加修改。</abstract>
<short lang="zh_CN">图像处理过程。</short>
<parameters>
<parameter id="Directory">
<description lang="zh_CN">ROI文件路径。</description>
<sem_type>string</sem_type>
</parameter>
<parameter id="Image">
<description lang="zh_CN">输入图形变量。</description>
<sem_type>image</sem_type>
</parameter>
<parameter id="ModelData">
<description lang="zh_CN">模板的数据。</description>
<sem_type>number</sem_type>
</parameter>
<parameter id="ModelId">
<description lang="zh_CN">模板的句柄。</description>
<sem_type>integer</sem_type>
</parameter>
<parameter id="TupleResult">
<description lang="zh_CN">得到的结果数据。</description>
<sem_type>number</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="T2_1">
<interface>
<io>
<par name="Image"/>
</io>
<ic>
<par name="Directory"/>
<par name="ModelId"/>
<par name="ModelData"/>
</ic>
<oc>
<par name="TupleResult"/>
</oc>
</interface>
<body>
<c>*先赋值，以免发生异常后读取非法内存</c>
<l>TupleResult := -999 </l>
<c></c>
<l>FindTemplete (Image, ModelId, ModelData, Score, FixTool)</l>
<l>if(|Score| &gt; 0)  </l>
<c>    *读取第一个ROI,圆环  </c>
<l>    ReadRoiAnnularCircle (Directory +  '/Circle.roi', RoiDataIn)</l>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut) </l>
<c>    *查找圆,方向outer指定由外向内,以大圆半径为中心,100个点,可排除20个干扰点,阈值5,</c>
<c>    *平滑系数0.4, 由白到黑,取第一点</c>
<l>    FindCircle (Image, RoiDataOut, 'outer', 100, 20, 10, 0.4,\
                'negative', 'first', Row, Col, Radius)</l>
<c>    </c>
<l>    if(|Row| = 0)</l>
<l>        TupleResult := -998</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>    gen_cross_contour_xld(Cross,Row, Col, 60, 0)</l>
<l>    dev_display(Cross)</l>
<l>    dev_disp_message( 'Row= '+ Row, 'window', 40, 20, 'green', 'false')</l>
<l>    dev_disp_message ('Col= '+ Col, 'window', 60, 20, 'green', 'false')</l>
<l>    dev_disp_message ('Radius= '+ Radius, 'window', 80, 20, 'green', 'false')</l>
<c></c>
<c>  </c>
<c>    </c>
<l>    TupleResult := [1, Row, Col, Radius]     </l>
<c>    </c>
<l>else</l>
<c>    *模板查找失败</c>
<l>    TupleResult := -999   </l>
<c>    </c>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="T2_1">
<abstract lang="zh_CN">图像处理过程，函数内的过程可以添加修改。</abstract>
<short lang="zh_CN">图像处理过程。</short>
<parameters>
<parameter id="Directory">
<description lang="zh_CN">ROI文件路径。</description>
<sem_type>string</sem_type>
</parameter>
<parameter id="Image">
<description lang="zh_CN">输入图形变量。</description>
<sem_type>image</sem_type>
</parameter>
<parameter id="ModelData">
<description lang="zh_CN">模板的数据。</description>
<sem_type>number</sem_type>
</parameter>
<parameter id="ModelId">
<description lang="zh_CN">模板的句柄。</description>
<sem_type>integer</sem_type>
</parameter>
<parameter id="TupleResult">
<description lang="zh_CN">得到的结果数据。</description>
<sem_type>number</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="FindTemplete_Angle">
<interface>
<io>
<par name="Image"/>
</io>
<ic>
<par name="ModelId"/>
<par name="ModelData"/>
</ic>
<oc>
<par name="ModelScore"/>
<par name="FixTool"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>find_scaled_shape_model (Image, ModelId, rad(0),rad(360),0.95,1.05,\
                         0.20, 1, 0.5, 'least_squares',[5,1], 0.75,\
                         ModelRow, ModelColumn, ModelAngle, ModelScale,\
                         ModelScore)</l>
<c></c>
<l>if(|ModelScore| &gt; 0)     </l>
<c>     *生成座标转换矩阵</c>
<l>     vector_angle_to_rigid(ModelData[0],ModelData[1], ModelData[2],\
                           ModelRow, ModelColumn, ModelAngle, FixTool)            </l>
<c>     *显示找到的轮廓</c>
<l>     if(0)</l>
<l>          dev_display_shape_matching_results (ModelId, 'red', ModelRow,\
                                              ModelColumn, ModelAngle,\
                                              1, 1, 0)</l>
<l>*           DetlaAngle := ModelAngle - InitAngle           </l>
<l>     endif  </l>
<c>     *显示模板查找得分信息</c>
<c>     </c>
<l>     dev_disp_message( 'Model Score is '+ ModelScore, \
                      'window', 20, 20, 'green', 'false')</l>
<c>     </c>
<l>else</l>
<l>*      ModelScore := []</l>
<l>     dev_disp_message( 'Model find fail !', 'window', 20, 20, 'red', 'true')          </l>
<l>endif</l>
<l>return ()</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="FindTemplete_Angle">
<parameters>
<parameter id="FixTool"/>
<parameter id="Image"/>
<parameter id="ModelData"/>
<parameter id="ModelId"/>
<parameter id="ModelScore"/>
</parameters>
</docu>
</procedure>
<procedure name="T1_1">
<interface>
<io>
<par name="Image"/>
</io>
<ic>
<par name="Directory"/>
<par name="ModelId"/>
<par name="ModelData"/>
</ic>
<oc>
<par name="TupleResult"/>
</oc>
</interface>
<body>
<l>TupleResult := -999 </l>
<c></c>
<c>*进行模板查找</c>
<l>FindTemplete (Image, ModelId, ModelData, Score, FixTool)</l>
<l>if(|Score| &gt; 0)</l>
<c>    </c>
<c>    *读取第一个ROI,圆环  </c>
<l>    ReadRoiAnnularCircle (Directory +  '/Circle.roi', RoiDataIn)</l>
<c>    *根据模板查找的座标来转换ROI</c>
<l>    TranslateRoi (FixTool, RoiDataIn, RoiDataOut) </l>
<c>    *查找圆,方向outer指定由外向内,以大圆半径为中心,100个点,可排除20个干扰点,阈值5,</c>
<c>    *平滑系数0.4, 由白到黑,取第一点</c>
<l>    FindCircle (Image, RoiDataOut, 'outer', 100, 20, 5, 0.4,\
                'negative', 'first', Row, Col, Radius)</l>
<l>    gen_cross_contour_xld(Cross, Row, Col, 60, 0.785398)</l>
<l>    dev_display(Cross)</l>
<c>    </c>
<l>    if(|Row| = 0)</l>
<l>        TupleResult := -998</l>
<l>        return()</l>
<l>    endif</l>
<l>    gen_cross_contour_xld (Cross, Row, Col, 60, 0.785398)</l>
<l>    dev_display(Cross)</l>
<l>        dev_disp_message( 'Row= '+ Row, 'window', 40, 20, 'green', 'false')</l>
<l>        dev_disp_message ('Col= '+ Col, 'window', 60, 20, 'green', 'false')</l>
<l>        dev_disp_message ('Radius= '+ Radius, 'window', 80, 20, 'green', 'false')</l>
<c>    </c>
<l>    gen_circle(circle1,Row,Col,Radius-40)</l>
<l>    gen_circle (circle2,Row, Col, Radius-130 )</l>
<c>    </c>
<l>    difference(circle1, circle2, RegionDifference)   </l>
<l>    reduce_domain(Image, RegionDifference, ImageReduced)</l>
<l>*     mean_image(ImageReduced, ImageMean3, 9, 9)</l>
<l>*     emphasize(ImageReduced,ImageEmphasize, 7, 7, 1)</l>
<c>    </c>
<l>    gray_features(RegionDifference, ImageReduced, 'mean', Value)</l>
<l>*     edges_image(ImageEmphasize, ImaAmp, ImaDir, 'canny', 1, 'nms', 8, 30)</l>
<l>*     edges_sub_pix(ImageEmphasize, Edges1, 'canny', 1, 8, 20)</l>
<l>*     gray_histo(RegionDifference, ImageEmphasize, AbsoluteHisto1, RelativeHisto1)</l>
<l>*     gray:= 250</l>
<l>*     if(Value &gt; 250)</l>
<l>*     Value :=250</l>
<l>*     endif</l>
<l>    threshold(ImageReduced, Region1, 180, 255)</l>
<c>    </c>
<l>*     opening_circle(Region1, RegionClosing, 1.5)</l>
<l>*     connection(RegionClosing, ConnectedRegions)</l>
<l>*     select_shape(ConnectedRegions, SelectedRegions, 'area', 'and', 4000, 6500)</l>
<l>*     select_shape (SelectedRegions, SelectedRegions2, 'rect2_len1', 'and', 160, 210)</l>
<l>*     gray_features(SelectedRegions2, ImageReduced, 'mean', Value)</l>
<c>    </c>
<l>    smallest_rectangle2 (Region1, Row2, Column2, Phi, Length1, Length2)</l>
<l>    Phi :=Phi+3.1415926/2</l>
<l>    gen_arrow_contour_xld (Arrow, Row, Col, Row - Radius * sin(Phi),\
                           Col + Radius * cos(Phi), 5, 5)</l>
<l>    dev_display (Arrow)</l>
<c></c>
<l>    Phi :=deg(Phi)</l>
<l>    if(Phi&gt;180)</l>
<l>        Phi:=Phi-180</l>
<l>    endif</l>
<l>    dev_disp_message( 'Phi= '+ Phi, 'window', 100, 20, 'green', 'false')</l>
<l>    dev_disp_message( 'Length1= '+ Length1, 'window', 120, 20, 'green', 'false')</l>
<l>    dev_disp_message ('Length2= '+ Length2, 'window', 140, 20, 'green', 'false')</l>
<l>*     if (|Value| ==0)        </l>
<l>*         TupleResult := -997</l>
<l>*         return()</l>
<l>*     endif</l>
<c>  </c>
<l>    TupleResult := [1, Row, Col, Phi] </l>
<c>    </c>
<l>else</l>
<c>    *模板查找失败</c>
<l>    TupleResult := -999 </l>
<l>endif</l>
<c></c>
<l>return ()</l>
<c></c>
</body>
<docu id="T1_1">
<abstract lang="zh_CN">图像处理过程，函数内的过程可以添加修改。</abstract>
<short lang="zh_CN">图像处理过程。</short>
<parameters>
<parameter id="Directory">
<description lang="zh_CN">ROI文件路径。</description>
<sem_type>string</sem_type>
</parameter>
<parameter id="Image">
<description lang="zh_CN">输入图形变量。</description>
<sem_type>image</sem_type>
</parameter>
<parameter id="ModelData">
<description lang="zh_CN">模板的数据。</description>
<sem_type>number</sem_type>
</parameter>
<parameter id="ModelId">
<description lang="zh_CN">模板的句柄。</description>
<sem_type>integer</sem_type>
</parameter>
<parameter id="TupleResult">
<description lang="zh_CN">得到的结果数据。</description>
<sem_type>number</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
</hdevelop>
